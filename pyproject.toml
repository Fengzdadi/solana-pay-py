[project]
name = "solana-pay-py"
version = "0.1.0"
description = "Python implementation of Solana Pay protocol for seamless cryptocurrency payments"
readme = "README.md"
authors = [
    { name = "Fengzdadi", email = "453788063@qq.com" }
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.118.2",
    "httpx>=0.28.1",
    "pillow>=11.3.0",
    "pydantic>=2.12.0",
    "qrcode>=8.2",
    "requests>=2.32.5",
    "solana>=0.36.9",
    "solders>=0.26.0",
    "uvicorn>=0.37.0",
]

[project.scripts]
solana-pay = "solanapay.cli:cli_main"

[build-system]
requires = ["uv_build>=0.8.15,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "anyio>=4.11.0",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.14.0",
    "types-requests>=2.32.4.20250913",
    "hypothesis>=6.88.0",
]

[tool.uv.workspace]
members = [
    ".",
]
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "solana.*",
    "solders.*",
    "spl.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: end-to-end tests against devnet",
]

[tool.coverage.run]
source = ["solanapay"]
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
